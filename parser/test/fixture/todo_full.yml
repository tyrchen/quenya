openapi: 3.0.0
info:
  title: Todo API
  description: |
    Hello world! This is a __Sample API__ for todo API
  version: 0.1.0
servers:
  - url: https://api.todo.mvc/v1
    description: Production server
  - url: http://localhost:4000/api/v1
    description: Local dev server
tags:
  - name: todos
  - name: todo
components:
  schemas:
    status:
      type: string
      enum: [active, completed]
    todoId:
      type: string
      format: uuid
    todoBody:
      type: string
      minLength: 3
      maxLength: 140
    dateTime:
      type: string
      format: date-time
    Todo:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/todoId"
        body:
          $ref: "#/components/schemas/todoBody"
        status:
          $ref: "#/components/schemas/status"
        created:
          $ref: "#/components/schemas/dateTime"
        updated:
          $ref: "#/components/schemas/dateTime"
      required: [body]
      example:
        id: 16ba8d00-d44c-4f61-841f-2da8221091bc
        body: "hello world!"
        status: active
        created: "2020-11-11T17:32:28Z"
        updated: "2020-11-11T19:32:28Z"

    Todos:
      type: array
      items:
        $ref: "#/components/schemas/Todo"
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  parameters:
    cursor:
      name: X-Cursor
      in: header
      required: true
      description: cursor for next page
      schema:
        type: string
    filter:
      name: filter
      in: query
      description: >
        filter type:
          * `all`: default, show all items
          * `active`: show active todo items
          * `completed`: show completed todo items
      schema:
        type: string
        enum: [all, active, completed]
        default: all
    limit:
      name: limit
      in: query
      required: false
      description: >
        how many items to return at one time
        * default: 10
        * min: 10
        * max: 100
      schema:
        type: integer
        format: int32
        minimum: 10
        maximum: 100
        default: 10

  responses:
    Todo:
      description: a single todo item
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Todo"
    Error:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Todos:
      description: a paged array of todo items
      headers:
        X-Cursor:
          $ref: "#/components/parameters/cursor"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Todos"

  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /todo/{todoId}:
    get:
      operationId: getTodo
      tags: [todo]
      description: get a todo item
      x-services:
        - name: GetTodo
      parameters:
        - name: todoId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            $ref: "#/components/schemas/todoId"
      responses:
        "200":
          $ref: "#/components/responses/Todo"
        default:
          $ref: "#/components/responses/Error"

    delete:
      operationId: deleteTodo
      tags: [todo]
      description: delete a todo item
      parameters:
        - name: todoId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            $ref: "#/components/schemas/todoId"
      responses:
        "204":
          description: No content
        default:
          $ref: "#/components/responses/Error"
    patch:
      operationId: updateTodo
      tags: [todo]
      description: update todo status
      parameters:
        - name: todoId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            $ref: "#/components/schemas/todoId"
      requestBody:
        description: todo item status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: "#/components/schemas/status"
      responses:
        "200":
          $ref: "#/components/responses/Todo"
        default:
          $ref: "#/components/responses/Error"

  /todos:
    get:
      operationId: listTodos
      tags: [todos]
      description: returns a list of todo items.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/filter"
      responses:
        "200":
          $ref: "#/components/responses/Todos"
        default:
          $ref: "#/components/responses/Error"

    post:
      operationId: createTodo
      tags: [todos]
      description: create a new todo item
      requestBody:
        description: todo item to be posted
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
            example:
              body: "hello world"
      responses:
        "201":
          $ref: "#/components/responses/Todo"
        default:
          $ref: "#/components/responses/Error"
